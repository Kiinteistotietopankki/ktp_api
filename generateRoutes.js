#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Get CLI args
const [,, controllerPathArg, baseRouteArg] = process.argv;

if (!controllerPathArg || !baseRouteArg) {
  console.error('Usage: node generateRoutes <controllerFilePath> <baseRoutePrefix>');
  process.exit(1);
}

const controllerFilePath = path.resolve(controllerPathArg);
const baseRoute = baseRouteArg.endsWith('/') ? baseRouteArg.slice(0, -1) : baseRouteArg;

// 1. Read controller file content
if (!fs.existsSync(controllerFilePath)) {
  console.error(`Controller file not found: ${controllerFilePath}`);
  process.exit(1);
}

const controllerFileContent = fs.readFileSync(controllerFilePath, 'utf-8');

// 2. Extract exported async functions names using regex
// Assuming pattern: exports.funcName = async (...) => { ... }
const exportFuncRegex = /exports\.(\w+)\s*=\s*async\s*\(/g;

const functionNames = [];
let match;
while ((match = exportFuncRegex.exec(controllerFileContent)) !== null) {
  functionNames.push(match[1]);
}

if (functionNames.length === 0) {
  console.error('No exported async functions found in controller file.');
  process.exit(1);
}

// 3. Generate router content with Swagger docs
let output = '';
output += `const express = require('express');\n`;
output += `const router = express.Router();\n`;
output += `const controller = require('${path.relative(process.cwd(), controllerFilePath)}');\n\n`;

functionNames.forEach(fnName => {
  // For route path, convert camelCase function name to kebab-case
  const routePathPart = fnName
    .replace(/([a-z])([A-Z])/g, '$1-$2')
    .toLowerCase();

  const fullRoutePath = `${baseRoute}/${routePathPart}`;

  output += `/**\n`;
  output += ` * @swagger\n`;
  output += ` * ${fullRoutePath}:\n`;
  output += ` *   get:\n`;
  output += ` *     summary: Auto-generated route for ${fnName}\n`;
  output += ` *     tags: [AutoGenerated]\n`;
  output += ` *     responses:\n`;
  output += ` *       200:\n`;
  output += ` *         description: Successful response\n`;
  output += ` *         content:\n`;
  output += ` *           application/json:\n`;
  output += ` *             schema:\n`;
  output += ` *               type: object\n`;
  output += ` */\n`;

  output += `router.get('${fullRoutePath}', controller.${fnName});\n\n`;
});

output += `module.exports = router;\n`;

// 4. Write output to file
const outputFileName = path.join(process.cwd(), 'generatedRoutes.js');
fs.writeFileSync(outputFileName, output);

console.log(`Generated routes file: ${outputFileName}`);
